#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Projekt_v2.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GameUsers")]
	public partial class GameUsersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPASSWORD(PASSWORD instance);
    partial void UpdatePASSWORD(PASSWORD instance);
    partial void DeletePASSWORD(PASSWORD instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertSTAT(STAT instance);
    partial void UpdateSTAT(STAT instance);
    partial void DeleteSTAT(STAT instance);
    #endregion
		
		public GameUsersDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GameUsersConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GameUsersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameUsersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameUsersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GameUsersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PASSWORD> PASSWORDs
		{
			get
			{
				return this.GetTable<PASSWORD>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<STAT> STATs
		{
			get
			{
				return this.GetTable<STAT>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PASSWORD")]
	public partial class PASSWORD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Hash;
		
		private string _Salt;
		
		private int _NumberOfHashes;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    partial void OnNumberOfHashesChanging(int value);
    partial void OnNumberOfHashesChanged();
    #endregion
		
		public PASSWORD()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfHashes", DbType="Int NOT NULL")]
		public int NumberOfHashes
		{
			get
			{
				return this._NumberOfHashes;
			}
			set
			{
				if ((this._NumberOfHashes != value))
				{
					this.OnNumberOfHashesChanging(value);
					this.SendPropertyChanging();
					this._NumberOfHashes = value;
					this.SendPropertyChanged("NumberOfHashes");
					this.OnNumberOfHashesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PASSWORD", Storage="_USER", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.PASSWORD = null;
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.PASSWORD = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Email;
		
		private EntityRef<PASSWORD> _PASSWORD;
		
		private EntitySet<STAT> _STATs;
		
		private EntitySet<STAT> _STATs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public USER()
		{
			this._PASSWORD = default(EntityRef<PASSWORD>);
			this._STATs = new EntitySet<STAT>(new Action<STAT>(this.attach_STATs), new Action<STAT>(this.detach_STATs));
			this._STATs1 = new EntitySet<STAT>(new Action<STAT>(this.attach_STATs1), new Action<STAT>(this.detach_STATs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PASSWORD", Storage="_PASSWORD", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PASSWORD PASSWORD
		{
			get
			{
				return this._PASSWORD.Entity;
			}
			set
			{
				PASSWORD previousValue = this._PASSWORD.Entity;
				if (((previousValue != value) 
							|| (this._PASSWORD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PASSWORD.Entity = null;
						previousValue.USER = null;
					}
					this._PASSWORD.Entity = value;
					if ((value != null))
					{
						value.USER = this;
					}
					this.SendPropertyChanged("PASSWORD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAT", Storage="_STATs", ThisKey="ID", OtherKey="CrossesID")]
		public EntitySet<STAT> STATs
		{
			get
			{
				return this._STATs;
			}
			set
			{
				this._STATs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAT1", Storage="_STATs1", ThisKey="ID", OtherKey="NoughtsID")]
		public EntitySet<STAT> STATs1
		{
			get
			{
				return this._STATs1;
			}
			set
			{
				this._STATs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STATs(STAT entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_STATs(STAT entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_STATs1(STAT entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = this;
		}
		
		private void detach_STATs1(STAT entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATS")]
	public partial class STAT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CrossesID;
		
		private int _NoughtsID;
		
		private int _Result;
		
		private EntityRef<USER> _USER;
		
		private EntityRef<USER> _USER1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCrossesIDChanging(int value);
    partial void OnCrossesIDChanged();
    partial void OnNoughtsIDChanging(int value);
    partial void OnNoughtsIDChanged();
    partial void OnResultChanging(int value);
    partial void OnResultChanged();
    #endregion
		
		public STAT()
		{
			this._USER = default(EntityRef<USER>);
			this._USER1 = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrossesID", DbType="Int NOT NULL")]
		public int CrossesID
		{
			get
			{
				return this._CrossesID;
			}
			set
			{
				if ((this._CrossesID != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCrossesIDChanging(value);
					this.SendPropertyChanging();
					this._CrossesID = value;
					this.SendPropertyChanged("CrossesID");
					this.OnCrossesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoughtsID", DbType="Int NOT NULL")]
		public int NoughtsID
		{
			get
			{
				return this._NoughtsID;
			}
			set
			{
				if ((this._NoughtsID != value))
				{
					if (this._USER1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoughtsIDChanging(value);
					this.SendPropertyChanging();
					this._NoughtsID = value;
					this.SendPropertyChanged("NoughtsID");
					this.OnNoughtsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Int NOT NULL")]
		public int Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAT", Storage="_USER", ThisKey="CrossesID", OtherKey="ID", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.STATs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.STATs.Add(this);
						this._CrossesID = value.ID;
					}
					else
					{
						this._CrossesID = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAT1", Storage="_USER1", ThisKey="NoughtsID", OtherKey="ID", IsForeignKey=true)]
		public USER USER1
		{
			get
			{
				return this._USER1.Entity;
			}
			set
			{
				USER previousValue = this._USER1.Entity;
				if (((previousValue != value) 
							|| (this._USER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER1.Entity = null;
						previousValue.STATs1.Remove(this);
					}
					this._USER1.Entity = value;
					if ((value != null))
					{
						value.STATs1.Add(this);
						this._NoughtsID = value.ID;
					}
					else
					{
						this._NoughtsID = default(int);
					}
					this.SendPropertyChanged("USER1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
